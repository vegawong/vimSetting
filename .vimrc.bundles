
" Environment {

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

" }

" Plugins {
    call plug#begin('~/.vim/plugged')

    "----------------------------------------
    " 中文文档
    "----------------------------------------
    Plug 'yianwillis/vimcdoc'

    "----------------------------------------
    " 颜色主题
    "----------------------------------------
    Plug 'altercation/vim-colors-solarized'
    let g:solarized_termcolors=256
    " let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    Plug 'joshdick/onedark.vim'

    "----------------------------------------
    " screen, welcome page
    "----------------------------------------
    Plug 'mhinz/vim-startify'
    let g:startify_custom_header = [
                \ '                                                                 ', 
                \ '         _______ _       ______  _______ _______ _______ _______ ',  
                \ '|\     /(  ___  ( (    /(  __  \(  ____ (  ___  (       (  ____ \',  
                \ '| )   ( | (   ) |  \  ( | (  \  | (    \| (   ) | () () | (    \/',  
                \ '| (___) | (___) |   \ | | |   ) | (_____| |   | | || || | (__    ',  
                \ '|  ___  |  ___  | (\ \) | |   | (_____  | |   | | |(_)| |  __)   ',  
                \ '| (   ) | (   ) | | \   | |   ) |     ) | |   | | |   | | (      ',  
                \ '| )   ( | )   ( | )  \  | (__/  /\____) | (___) | )   ( | (____/\',  
                \ '|/     \|/     \|/    )_(______/\_______(_______|/     \(_______/',  
                \ '                                                                 ', 
                \ '         _______ _______ _______                                 ',  
                \ '|\     /(  ____ (  ____ (  ___  )                                ',  
                \ '| )   ( | (    \| (    \| (   ) |                                ',  
                \ '| |   | | (__   | |     | (___) |                                ',  
                \ '( (   ) |  __)  | | ____|  ___  |                                ',  
                \ ' \ \_/ /| (     | | \_  | (   ) |                                ',  
                \ '  \   / | (____/| (___) | )   ( |                                ',  
                \ '   \_/  (_______(_______|/     \|                                ',  
                \ '                                                                 ',  
                \ ]



    "----------------------------------------
    " 语法高亮
    "----------------------------------------
    Plug 'HerringtonDarkholme/yats.vim'
    Plug 'mxw/vim-jsx'
    let g:jsx_ext_required = 0 " Allow JSX in normal JS files



    
    "----------------------------------------
    " 工具
    "----------------------------------------
    Plug 'scrooloose/nerdtree' " 目录树
    autocmd StdinReadPre * let s:std_in=1
    " autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | Startify | exe 'NERDTree' argv()[0] | wincmd p | ene | endif       
    autocmd VimEnter * if !argc() | Startify | NERDTree | wincmd w | endif
    " 切换NERDTree显示，速记：file list
    nnoremap <leader>fl :NERDTreeToggle<CR>
    " nnoremap <c-o> :NERDTreeFind<CR>
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let NERDTreeMinimalUI=1
    let g:nerdtree_tabs_open_on_gui_startup=0
    Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'  " 状态栏
    let g:airline_powerline_fonts = 1  " 开启特殊符号
    let g:airline#extensions#tabline#enabled = 1 " 开启tab名称显示
    let g:airline#extensions#tabline#formatter = 'unique_tail' " 更改tabName显示格式, 同名时显示唯一区分
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline_theme='onedark'
    Plug 'Yggdroot/LeaderF', { 'do': '.\install.sh' } " 快速打开文件
    Plug 'dyng/ctrlsf.vim' " 全局搜索
    let g:ctrlsf_ackprg = 'ag'
    Plug 'easymotion/vim-easymotion' " 快速光标跳转
    nmap <leader>/ <plug>(easymotion-sn)
    Plug 'scrooloose/nerdcommenter' " 快速注释
    let g:NERDSpaceDelims = 1
    Plug 'heavenshell/vim-jsdoc' " js doc
    nmap <silent> <C-l> <Plug>(jsdoc) 
    Plug 'Shougo/deoplete.nvim' | Plug 'Shougo/denite.nvim' " 异步自动完成
    let g:deoplete#enable_at_startup = 1
    Plug 'majutsushi/tagbar' " code outline & support tags

    
    "----------------------------------------
    " 快速编辑
    "----------------------------------------
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' " 代码片段
    let g:UltiSnipsExpandTrigger = '<c-j>'
    let g:UltiSnipsListSnippets = '<c-tab>' 
    let g:UltiSnipsJumpForwardTrigger = '<c-j>' 
    let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
    Plug 'raimondi/delimitmate' " 自动补全成对符号 
    let delimitMate_expand_cr = 1 
    let delimitMate_expand_space = 1
    let delimitMate_matchpairs = "(:),[:],{:}"        
    Plug 'tpope/vim-surround' " 快速替换,编辑成对符号
    Plug 'alvan/vim-closetag' " 自动补全关闭tag 
    let g:closetag_filetypes="xml,html,phtml,ejs,php,typescriptreact,javascriptreact"
    Plug 'mattn/emmet-vim'  " html快速生成 


    "----------------------------------------
    " Typescript
    "----------------------------------------
    Plug 'mhartington/nvim-typescript', {'do': './install.sh'}  " Typescript service


     
    "----------------------------------------
    " 格式化
    "----------------------------------------
    Plug 'chiel92/vim-autoformat' 
    Plug 'prettier/vim-prettier', {
        \ 'do': 'yarn install',
        \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']}
    nmap <leader><c-f> :Prettier<CR>
    let g:prettier#config#tab_width = 4
    let g:prettier#config#single_quote = 'true'


    "----------------------------------------
    " git 相关
    "----------------------------------------
    Plug 'tpope/vim-fugitive'
    Plug 'junegunn/gv.vim'
    Plug 'airblade/vim-gitgutter'

    call plug#end()
" }

